//  SceneDelegate.swift
//  Created by user on 20/01/2025.

import UIKit


enum WindowCase: String {
    case reg, onboarding, main
}

class SceneDelegate: UIResponder, UIWindowSceneDelegate {

    var window: UIWindow?


    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
        
        // Our Notification to set "Preview" -> "Reg" OR "Main" ViewControllers in SceneDelegate
        NotificationCenter.default.addObserver(self, selector: #selector(windowManager), name: .windowManager, object: nil)
        
        // –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ "PreviewView" –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–≤–æ–≥–æ ViewContoller (–ø–µ—Ä–≤—ã–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
        guard let scene = (scene as? UIWindowScene) else { return }
        self.window = UIWindow(windowScene: scene)
        self.window?.rootViewController = PreviewView()
        self.window?.makeKeyAndVisible()
    }

    
    // Our func  -> UIViewController
    // add @objc - because will call func via Notification (in UIKit?)
    // window: WindowCase
    @objc func windowManager(notification: Notification) {
        
        // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —Å—é–¥–∞ –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –º–µ–Ω—è–µ–º –Ω–∞—à RootControllerüòé
        
        guard let userInfo = notification.userInfo as? [String: WindowCase] else { return }
        
        // –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º, –Ω–∞ –∫–∞–∫–æ–π —ç–∫—Ä–∞–Ω –º—ã –±—É–¥–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å
        guard let window = userInfo[.windowInfo] else { return }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –º–µ–∂–¥—É View!
        switch window {
        case .reg:
            self.window?.rootViewController = Builder.createRegistrationView()
        case .onboarding:
            self.window?.rootViewController = Builder.createOnboardingView()
        case .main:
            self.window?.rootViewController = Builder.createMainView()
        }
        
    }

}

